<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>true</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>postresource</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) { // 2020.11.12. 15:40
// Create the response body object and fill it up with blank values.
var body = {};
body.TransactionID = '';
body.TicketNumber = '';
body.IncidentNumber = '';
body.ErrorType = '';
body.Success = true;
body.Message = '';
body.ServiceStatus = '';
	
var ticketfound = false;
var ticketfoundin1or2 = -1;
var incidentNumber = '';
var summary = '';
var incidentDescription = '';
var activityDescription = '' ;
var priority = 0;
var ticketPriority = 0;
// Take values from the request body	
var reqData = request.body.data.CreateIncidentRequest;
if (reqData == null) { // Not a Create but an Update request, take the IncidentNumber
	reqData = request.body.data.UpdateIncidentRequest;
	incidentNumber = reqData.Activity.IncidentNumber;
} // if
else { // take values from the Create request
	incidentNumber = reqData.Incident.IncidentNumber;
	summary = reqData.Incident.Summary;
	incidentDescription = reqData.Incident.Description;
	activityDescription = reqData.Incident.Activity.Description;
	// Take Urgency from the request and translate it to ServiceNow Priority	
	priority = parseInt(reqData.Incident.Urgency);
	if (priority <= 1) { ticketPriority = 4; }
	if (priority >= 4) { ticketPriority = 1; }
	if (priority == 2) { ticketPriority = 3; }
	if (priority == 3) { ticketPriority = 2; }
} // else
// Take further values regaredless of the Action	
var pluginName = reqData.Name;
var pluginID = reqData.ID;
var transactionID = reqData.TransactionID;
var action = reqData.Action.toUpperCase();	
var accountName = '';
var ticketNumber = reqData.TicketNumber;
var ticketStatusName = '';
// Some error handling would be useful here, missing or blank field, invalid value, etc.
// Search in the incidents table for the specified IncidentNumber in the CorrelationID field
var myObj = new GlideRecord('x_58872_needit_needit');
myObj.addQuery('correlation_id', '=', incidentNumber);
myObj.query();
var ticketsysid;
var ticketstatus;
while(myObj.next()) { //Logic you want to execute. Use myObj.field_name to reference record fields
	ticketfound = true;
	ticketfoundin1or2 = 1;
	ticketNumber = myObj.number;
	ticketsysid = myObj.sys_id;
	ticketstatus = parseInt(myObj.state);
	//body.ticketstatus = ticketstatus;
	// Statuses :  New = 1, In Progress = 2, On Hold = 3, Resolved = 4, Closed = 5, Cancelled = 6
} // while
if (!ticketfound) { // Ticket not found by external IncidentNumber, search for it by TicketNumber
	var myObj2 = new GlideRecord('x_58872_needit_needit');
	myObj2.addQuery('number', '=', ticketNumber);
	myObj2.query();
	while(myObj2.next()){
		ticketfound = true;
		ticketfoundin1or2 = 2;
		ticketNumber = myObj2.number;
		ticketsysid = myObj2.sys_id;
		ticketstatus = parseInt(myObj2.state);
		//body.ticketstatus = ticketstatus;
	} // while
} // if
	
switch (action) {
  case 'CREATE':
	something = 'It is a Create request.';
		accountName = reqData.Incident.AccountName;
		if (ticketfound) {
			body.TransactionID = transactionID;
			body.TicketNumber = ticketNumber;
			body.IncidentNumber = incidentNumber;
			body.ErrorType = '';
			switch (ticketstatus) {
				case 1:
					ticketStatusName = 'New';
					break;
				case 2:
					ticketStatusName = 'In Progress';
					break;
				case 3:
					ticketStatusName = 'On Hold';
					break;
				case 4:
					ticketStatusName = 'Resolved';
					break;
				case 5:
					ticketStatusName = 'Closed';
					break;
				case 6:
					ticketStatusName = 'Cancelled';
					break;
				default:
					ticketStatusName = 'Unknown';
					break;
			} // switch
			switch (ticketstatus) {
				case 1: // New, use case 2.1.2
				case 2: // In Progress, use case 2.1.2
				case 3: // On Hold, use case 2.1.2
				case 4: // Resolved, use case 2.1.2
					body.Success = true;
					body.Message = 'There already is a ticket (' + ticketNumber + ') in an active state (' + ticketStatusName + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + '.';
					body.ServiceStatus = '';
					break;
				case 5: // Closed, use case 2.1.3
					body.Success = false;
					body.Message = 'The ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' is already Closed.';
					body.ServiceStatus = 'Closed';
					break;
				case 6: // Cancelled, use case 2.1.3
					body.Success = false;
					body.Message = 'The ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' is already Cancelled.';
					body.ServiceStatus = 'Closed';
					break;
				default:// use case 2.1.2
					body.Success = true;
					body.Message = 'There already is a ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' that is in an unknown state.';
					body.ServiceStatus = '';
					break;
			} // switch
		} // if ticketfound
		else {
			// create a new ticket here, while it is not yet coded I send a response as if the ticket has been created
			body.TransactionID = transactionID;
			body.IncidentNumber = incidentNumber;
			body.ServiceStatus = '';
			body.Success = true;
			body.ErrorType = '';
			
			var newTicket = new GlideRecord('x_58872_needit_needit'); //newTicket.newRecord();
			newTicket.initialize();
			newTicket.state = 1;
			newTicket.priority = ticketPriority;
			var S = 'Plugin Name :\r\n\t' + pluginName + '\r\n';
			S += 'Plugin ID :\r\n\t' + pluginID + '\r\n';
			S += 'Transaction ID :\r\n\t' + transactionID + '\r\n';
			S += 'Action :\r\n\t' + action + '\r\n';
			S += 'Incident Number :\r\n\t' + incidentNumber + '\r\n';
			S += 'Account name :\r\n\t' + accountName + '\r\n';
			S += 'Assignment group :\r\n\t' + reqData.Incident.AssignmentGroup + '\r\n';
			S += 'Service :\r\n\t' + reqData.Incident.Service + '\r\n';
			S += 'Service status :\r\n\t' + reqData.Incident.ServiceStatus + '\r\n\r\n';
			S += 'Summary :\r\n\t' + summary + '\r\n\r\n';
			S += 'Incident description :\r\n\t' + incidentDescription + '\r\n\r\n';
			S += 'Activity desctiption :\r\n\t' + activityDescription + '\r\n\r\n';
			S += 'Problem type :\r\n\t' + reqData.Incident.ProblemType + '\r\n';
			S += 'Problem sub-type :\r\n\t' + reqData.Incident.ProblemSubType + '\r\n';
			S += 'Impact :\r\n\t' + reqData.Incident.Impact + '\r\n';
			S += 'Urgency :\r\n\t' + reqData.Incident.Urgency + '\r\n\r\n';
			S += 'Asset Number :\r\n\t' + reqData.Incident.Asset.AssetNumber + '\r\n';
			S += 'Serial Number :\r\n\t' + reqData.Incident.Asset.SerialNumber + '\r\n\r\n';
			S += 'Customer username :\r\n\t' + reqData.Incident.Customer.UserName + '\r\n';
			S += 'Customer first name :\r\n\t' + reqData.Incident.Customer.FirstName + '\r\n';
			S += 'Customer last name :\r\n\t' + reqData.Incident.Customer.LastName + '\r\n';
			S += 'Customer e-mail :\r\n\t' + reqData.Incident.Customer.Email + '\r\n';
			S += 'Customer phone :\r\n\t' + reqData.Incident.Customer.Phone + '\r\n';
			newTicket.description = S;
			newTicket.short_description = summary;
			var gdt = new GlideDateTime();
			gdt.addSeconds(60*60*24*3);
			newTicket.u_when_needed = gdt;
			newTicket.u_requested_for = 'System Administrator';
			newTicket.u_requested_for_email = 'admin@example.com';
			newTicket.u_request_type = 'legal';
			newTicket.u_what_needed = 'Legal 1';
			newTicket.correlation_id = incidentNumber;
			if (newTicket.canCreate()) {
				var newsysid = newTicket.insert();
				if (!newTicket.isActionAborted()) { // Insert succeeded
					newTicket.get('sys_id', newsysid);
					body.TicketNumber = newTicket.getDisplayValue(); // newsysid;
					body.Message = 'Ticket ' + newTicket.getDisplayValue() + ' (sys_id: ' + newsysid + ') has been created.';
				} // if
				else { // Insert failed
					body.Message = newTicket.getLastErrorMessage();
					body.TicketNumber = 'ERROR';
					body.Message = 'The ticket creation action has been aborted.';
				} // else
			} // if
			else { // cannot be created
				body.Success = false;
				body.Message = 'Ticket cannot be created due to insufficient permissions.';
				body.TicketNumber = '';
			} // else
		} // 
	break;

  case 'UPDATE':
	something = 'It is a Update request.';
	accountName = reqData.Activity.AccountName;
/*	if ((ticketNumber == null) || ((ticketNumber != null) && (ticketNumber == '')) )  {
		body.Issue = 'TicketNumber is null';
	} // if */
		if (ticketfound) {
			// Update the ticket by adding a new work note
			body.TransactionID = transactionID;
			body.TicketNumber = ticketNumber;
			body.IncidentNumber = incidentNumber;
			body.ErrorType = '';
			switch (ticketstatus) {
				case 1: // New, use case 2.2.1
				case 2: // In Progress, use case 2.2.1
				case 3: // On Hold, use case 2.2.1
				case 4: // Resolved, use case 2.2.1
					var tickettoupdate = new GlideRecord('x_58872_needit_needit');
					tickettoupdate.get(ticketsysid);
					if (tickettoupdate.canWrite()) {
						tickettoupdate.work_notes = reqData.Activity.Description;
						tickettoupdate.update();
						if (!tickettoupdate.isActionAborted()) { // Update succeeded
							body.Success = true;
							body.Message = 'Ticket (' + ticketNumber + ') has been updated.';
							body.ServiceStatus = '';
						} // if
						else { // Update failed
							// set body here
							body.Message = 'Ticket (' + ticketNumber + ') update aborted.';
						} // else
					} // if canWrite
					else { // cannot write
						body.Message = 'Ticket (' + ticketNumber + ') cannot be updated.';
					} // else // cannot write
					break;
				case 5: // Closed, use case 2.1.2
					body.Success = true;
					body.Message = 'The ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' is already Closed.';
					body.ServiceStatus = 'Closed';
					break;
				case 6: // Cancelled, use case 2.1.2
					body.Success = true;
					body.Message = 'The ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' is already Cancelled.';
					body.ServiceStatus = 'Closed';
					break;
				default:// use case 2.2.1
					body.Success = true;
					body.Message = 'Ticket (' + ticketNumber + ') has not been updated due to missing code and unknown state.';
					body.ServiceStatus = '';
					break;
			} // switch
		} // if ticketfound
		else { // ticket not found
			body.TransactionID = transactionID;
			body.TicketNumber = reqData.TicketNumber;
			body.IncidentNumber = incidentNumber;
			body.ErrorType = '';
			body.Success = true;
			body.Message = 'No ticket bound to the IncidentNumber ' + incidentNumber + ' can be found. The TicketNumber field is only populated to avoid issues.';
			body.ServiceStatus = 'Closed';
		} // else ticket not found
	break; // UPDATE
		
  case 'REASSIGN':
	something = 'It is a Reassign request.';
	break; // REASSIGN
  case 'RESOLVE':
	something = 'It is a Resolve request.';
	break; // RESOLVE
  case 'CLOSE':
	something = 'It is a Close request.';
	break; // CLOSE
  case 'CANCEL':
	something = 'It is a Cancel request.';
	break; // CANCEL
  default: // invalid Action
	something = 'Invalid Action.';
	body.TransactionID = transactionID;
	body.Action = action;
	body.ActionValidity = something;
	body.IncidentNumber = incidentNumber;
	body.Summary = summary;
	body.Description = incidentDescription;	
	body.Sys_ID = ticketsysid;
	body.TicketNumber = ticketNumber;
	body.TicketState = ticketstatus;
	body.TicketFound = ticketfound;
	break; // invalid Action
} // switch
//body.TicketStatus = ticketstatus;
	
/*	
var xmlstring = /*"<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">" +
  "<s:Header />" +
  "<s:Body>" +* /
    "<CreateIncidentResponse xmlns=\"Xerox.XIS.MpsHelpDeskService\">" +
      "<CreateIncidentResult xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">" +
        "<TransactionID>11111111-0915-0131-2922-2c50202d4c70</TransactionID>" +
        "<TicketNumber>ticket_number</TicketNumber>" +
        "<IncidentNumber>incident_number</IncidentNumber>" +
        "<Succcess>true</Succcess>" +
        "<Message>MeSsAgE</Message>" +
        "<ErrorType />" +
        "<Success>true</Success>" +
      "</CreateIncidentResult>" +
    "</CreateIncidentResponse>" /*+
  "</s:Body>" +
"</s:Envelope>"* /;	
*/	
	
response.setContentType('application/json');
response.setStatus(200);
response.setBody(body);
})(request, response);]]></operation_script>
        <operation_uri>/api/x_58872_needit/needit_api</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>true</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-08-11 09:54:09</sys_created_on>
        <sys_id>be140e311bae1010b28f8515ec4bcbcf</sys_id>
        <sys_mod_count>215</sys_mod_count>
        <sys_name>postresource</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ws_operation_be140e311bae1010b28f8515ec4bcbcf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-11-12 14:40:57</sys_updated_on>
        <web_service_definition display_value="NeedIt API">7562cafd1b6e1010b28f8515ec4bcb2f</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
