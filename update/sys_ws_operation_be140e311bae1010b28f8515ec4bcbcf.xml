<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>postresource</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
var body = {};
var ticketfound = false;
// Take values from the request body	
var reqData = request.body.data.CreateIncidentRequest;
var transactionID = reqData.TransactionID;
var action = reqData.Action.toUpperCase();	
var incidentNumber = reqData.Incident.IncidentNumber;
var accountName = reqData.Incident.AccountName;
var summary = reqData.Incident.Summary;
var incidentDescription = reqData.Incident.Description;
var customerEmail = reqData.Incident.Customer.Email;
var ticketNumber = reqData.TicketNumber;
// Some error handling would be useful here, missing or blank field, invalid value, etc.
// Search in the incidents table for the specified IncidentNumber in the CorrelationID field
var myObj = new GlideRecord('x_58872_needit_needit');
myObj.addQuery('correlation_id', '=', incidentNumber);
myObj.query();
var ticketsysid;
var ticketstatus;
while(myObj.next()){
	//Logic you want to execute. Use myObj.field_name to reference record fields
	ticketfound = true;
	ticketNumber = myObj.number;
	ticketsysid = myObj.sys_id;
	ticketstatus = myObj.state + 0;
//	ticketstatus = ToInteger(ticketstatus);
	// Statuses :  New = 1, In Progress = 2, On Hold = 3, Resolved = 4, Closed = 5, Cancelled = 6
} // while
	
switch (action) {
  case 'CREATE':
	something = 'It is a Create request.';
		if (ticketfound) {
			body.TransactionID = transactionID;
			body.TicketNumber = ticketNumber;
			body.IncidentNumber = incidentNumber;
			body.ErrorType = '';
			switch (ticketstatus) {
				case 1: // New, use case 2.1.2
				case 2: // In Progress, use case 2.1.2
				case 3: // On Hold, use case 2.1.2
				case 4: // Resolved, use case 2.1.2
					body.Success = true;
					body.Message = 'There already is a ticket (' + ticketNumber + ') in an active state in ServiceNow bound to the IncidentNumber ' + incidentNumber + '.';
					body.ServiceStatus = '';
					break;
				case 5: // Closed, use case 2.1.3
					body.Success = false;
					body.Message = 'The ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' is already Closed.';
					body.ServiceStatus = 'Closed';
					break;
				case 6: // Cancelled, use case 2.1.3
					body.Success = false;
					body.Message = 'The ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' is already Cancelled.';
					body.ServiceStatus = 'Closed';
					break;
				default:// use case 2.1.2
					body.Success = true;
					body.Message = 'There already is a ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' that is in an unknown state.';
					body.ServiceStatus = '';
					break;
			} // switch
		} // if ticketfound
		else {
			// create a new ticket
		} // 
	break;

  case 'UPDATE':
	something = 'It is a Update request.';
		
/*	if ((ticketNumber == null) || ((ticketNumber != null) && (ticketNumber == '')) )  {
		body.Issue = 'TicketNumber is null';
	} // if
*/
		
		
		if (ticketfound) {
			// Update the ticket by adding a new work note
			body.TransactionID = transactionID;
			body.TicketNumber = ticketNumber;
			body.IncidentNumber = incidentNumber;
			body.ErrorType = '';
			switch (ticketstatus) {
				case 1: // New, use case 2.2.1
				case 2: // In Progress, use case 2.2.1
				case 3: // On Hold, use case 2.2.1
				case 4: // Resolved, use case 2.2.1
					body.Success = true;
					body.Message = 'Ticket (' + ticketNumber + ') has not been updated due to missing code.';
					body.ServiceStatus = '';
					break;
				case 5: // Closed, use case 2.1.2
					body.Success = true;
					body.Message = 'The ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' is already Closed.';
					body.ServiceStatus = 'Closed';
					break;
				case 6: // Cancelled, use case 2.1.2
					body.Success = true;
					body.Message = 'The ticket (' + ticketNumber + ') in ServiceNow bound to the IncidentNumber ' + incidentNumber + ' is already Cancelled.';
					body.ServiceStatus = 'Closed';
					break;
				default:// use case 2.2.1
					body.Success = true;
					body.Message = 'Ticket (' + ticketNumber + ') has not been updated due to missing code and unknown state.';
					body.ServiceStatus = '';
					break;
			} // switch
		} // if ticketfound
		else { // ticket not found
			body.TransactionID = transactionID;
			body.TicketNumber = reqData.TicketNumber;
			body.IncidentNumber = incidentNumber;
			body.ErrorType = '';
			body.Success = true;
			body.Message = 'No ticket bound to the IncidentNumber ' + incidentNumber + ' can be found. The TicketNumber field is only populated to avoid issues.';
			body.ServiceStatus = 'Closed';
		} // else ticket not found
	break;
  case 'REASSIGN':
	something = 'It is a Reassign request.';
	break;
  case 'RESOLVE':
	something = 'It is a Resolve request.';
	break;
  case 'CLOSE':
	something = 'It is a Close request.';
	break;
  case 'CANCEL':
	something = 'It is a Cancel request.';
	break;
	default: // invalid Action
	something = 'Invalid Action.';
	body.TransactionID = transactionID;
	body.Action = action;
	body.ActionValidity = something;
	body.IncidentNumber = incidentNumber;
	body.AccountName = accountName;
	body.Summary = summary;
	body.Description = incidentDescription;	
	body.CustomerEmail = customerEmail;
	body.Sys_ID = ticketsysid;
	body.TicketNumber = ticketNumber;
	body.TicketState = ticketstatus;
	body.TicketFound = ticketfound;
	break;
} // switch
//body.TicketStatus = ticketstatus;
response.setContentType('application/json');
response.setStatus(200);
response.setBody(body);	
})(request, response);]]></operation_script>
        <operation_uri>/api/x_58872_needit/needit_api</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-08-11 09:54:09</sys_created_on>
        <sys_id>be140e311bae1010b28f8515ec4bcbcf</sys_id>
        <sys_mod_count>87</sys_mod_count>
        <sys_name>postresource</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ws_operation_be140e311bae1010b28f8515ec4bcbcf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-08-13 14:00:52</sys_updated_on>
        <web_service_definition display_value="NeedIt API">7562cafd1b6e1010b28f8515ec4bcb2f</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
